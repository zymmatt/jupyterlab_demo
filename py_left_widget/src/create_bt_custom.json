{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97ad1c04",
   "metadata": {},
   "outputs": [],
   "source": [
    "backtest_name='新回测1'\n",
    "stock_pool='A'\n",
    "filter_limitDown='True'\n",
    "filter_st='True'\n",
    "filter_neutral='False'\n",
    "filter_timeperiod='False'\n",
    "benchmark='000905.SH'\n",
    "frequency='month_end'\n",
    "holdingcount=200\n",
    "tradeCost=0.0001\n",
    "datefrom=''\n",
    "dateto=''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82c473eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from lsqt import BaseCtaStrategy, CtaContext, log_info\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "class MyStrategy(BaseCtaStrategy):\n",
    "\n",
    "    def __init__(self, name: str = 'pydt_D'):\n",
    "        BaseCtaStrategy.__init__(self, name)\n",
    "\n",
    "        self.days = 5\n",
    "        self.k1 = 0.1\n",
    "        self.k2 = 0.1\n",
    "        self.bar_cnt = 10\n",
    "\n",
    "        # self.__codes__ = [\"DCE.m.1903\"]\n",
    "        # self.__codes__ = [\"DCE.m.HOT\"]\n",
    "        self.__codes__ = [\"SHFE.ag.HOT\"]\n",
    "\n",
    "    def on_init(self, context: CtaContext):\n",
    "        code = self.__codes__[0]  # 品种代码\n",
    "        if self.__is_stk__:\n",
    "            code = code + \"Q\"\n",
    "\n",
    "        # 这里演示了品种信息获取的接口\n",
    "        #pInfo = context.stra_get_comminfo(code)\n",
    "        # print(pInfo)\n",
    "\n",
    "        context.stra_get_bars(\n",
    "            code,\n",
    "            self.__period__,\n",
    "            self.bar_cnt,\n",
    "            isMain=True)\n",
    "        log_info(\"初始化订阅行情\")\n",
    "\n",
    "    def on_bar(\n",
    "            self,\n",
    "            context: CtaContext,\n",
    "            stdCode: str,\n",
    "            period: str,\n",
    "            newBar: dict):\n",
    "        log_info(f\"newBar:{newBar}\")\n",
    "        code = self.__codes__[0]  # 品种代码\n",
    "\n",
    "        trdUnit = 1\n",
    "        if self.__is_stk__:\n",
    "            trdUnit = 100\n",
    "\n",
    "        # 读取最近50条1分钟线(dataframe对象)\n",
    "        theCode = code\n",
    "        if self.__is_stk__:\n",
    "            theCode = theCode + \"Q\"\n",
    "        df_bars = context.stra_get_bars(\n",
    "            theCode, self.__period__, self.bar_cnt, isMain=True)\n",
    "\n",
    "        # 把策略参数读进来，作为临时变量，方便引用\n",
    "        days = self.days\n",
    "        k1 = self.k1\n",
    "        k2 = self.k2\n",
    "\n",
    "        # 平仓价序列、最高价序列、最低价序列\n",
    "        closes = df_bars.closes\n",
    "        highs = df_bars.highs\n",
    "        lows = df_bars.lows\n",
    "\n",
    "        # 读取days天之前到上一个交易日位置的数据\n",
    "        hh = np.amax(highs[-days:-1])\n",
    "        hc = np.amax(closes[-days:-1])\n",
    "        ll = np.amin(lows[-days:-1])\n",
    "        lc = np.amin(closes[-days:-1])\n",
    "\n",
    "        # 读取今天的开盘价、最高价和最低价\n",
    "        # lastBar = df_bars.get_last_bar()\n",
    "        openpx = df_bars.opens[-1]\n",
    "        highpx = df_bars.highs[-1]\n",
    "        lowpx = df_bars.lows[-1]\n",
    "\n",
    "        '''\n",
    "        !!!!!这里是重点\n",
    "        1、首先根据最后一条K线的时间，计算当前的日期\n",
    "        2、根据当前的日期，对日线进行切片,并截取所需条数\n",
    "        3、最后在最终切片内计算所需数据\n",
    "        '''\n",
    "\n",
    "        # 确定上轨和下轨\n",
    "        upper_bound = openpx + k1 * max(hh - lc, hc - ll)\n",
    "        lower_bound = openpx - k2 * max(hh - lc, hc - ll)\n",
    "\n",
    "        # 读取当前仓位\n",
    "        curPos = context.stra_get_position(code) / trdUnit\n",
    "\n",
    "        if curPos == 0:\n",
    "            if highpx >= upper_bound:\n",
    "                context.stra_enter_long(\n",
    "                    stdCode=code, qty=1 * trdUnit, usertag='enterlong',insert_mongo=False)\n",
    "                log_info(\"向上突破%.2f>=%.2f，多仓进场\" % (highpx, upper_bound))\n",
    "                return\n",
    "\n",
    "            if lowpx <= lower_bound and not self.__is_stk__:\n",
    "                context.stra_enter_short(\n",
    "                    stdCode=code, qty=1 * trdUnit, usertag='entershort',insert_mongo=False)\n",
    "                log_info(\n",
    "                    \"向下突破%.2f<=%.2f，空仓进场\" %\n",
    "                    (lowpx, lower_bound))\n",
    "                return\n",
    "        elif curPos > 0:\n",
    "            if lowpx <= lower_bound:\n",
    "                context.stra_exit_long(\n",
    "                    stdCode=code, qty=1 * trdUnit, usertag='exitlong',insert_mongo=False)\n",
    "                log_info(\"向下突破%.2f<=%.2f，多仓出场\" % (lowpx, lower_bound))\n",
    "                return\n",
    "        else:\n",
    "            if highpx >= upper_bound and not self.__is_stk__:\n",
    "                context.stra_exit_short(\n",
    "                    stdCode=code, qty=1 * trdUnit, usertag='exitshort',insert_mongo=False)\n",
    "                log_info(\"向上突破%.2f>=%.2f，空仓出场\" % (highpx, upper_bound))\n",
    "                return\n",
    "\n",
    "    def on_tick(self, context: CtaContext, stdCode: str, newTick: dict):\n",
    "        #context.stra_log_text (\"on tick fired\")\n",
    "        # print(newTick)\n",
    "        return\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
